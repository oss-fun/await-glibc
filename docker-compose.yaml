services:
  # rootfsをダウンロードするコンテナ
  await-rootfs-builder:
    build:
      context: .
      dockerfile: ./rootfs-builder/Dockerfile
    privileged: true
    image: await-rootfs-builder
    volumes:
      - build-output:/output
    environment:
      - DIST=jammy
      - NAME=await-rootfs
    entrypoint: ["/bin/bash", "/app/scripts/download_rootfs.sh"] 

  # rootfsにglibcをインストールするコンテナ
  await-glibc-builder:
    build:
      context: .
      dockerfile: ./glibc-builder/Dockerfile
    image: await-glibc-builder
    depends_on:
      await-rootfs-builder:
        condition: service_completed_successfully
    volumes:
      - build-output:/output
      - ./glibc-builder/glibc-2.35:/build/glibc-2.35  # ソースコードのマウント
    entrypoint: ["/bin/bash", "/app/scripts/exec_all.sh"]
  
  # 成果物を圧縮して配信用ディレクトリに配置するサービス
  await-rootfs-packager:
    image: alpine
    depends_on:
      await-glibc-builder:
        condition: service_completed_successfully
    volumes:
      - build-output:/input
      - dist-data:/output
    command: >
      sh -c "cd /input/await-rootfs && find . -print0 | cpio --null --create --format=newc | gzip > /output/await-rootfs.cpio.gz"
      
  # rootfsを配信する用のサーバー
  await-rootfs-server:
    build:
      context: .
      dockerfile: ./rootfs-server/Dockerfile
    image: await-rootfs-server
    volumes:
      - dist-data:/app/data
    ports:
      - 8101:80

volumes:
  build-output:  # ビルド過程で使用する一時的なボリューム
  dist-data:     # 配信用のrootfsを格納するボリューム
